<%@page import="java.util.*"%>
<%@page import="java.sql.*"%>
<%@page import="java.net.*"%>
<%@page import="java.io.*"%>
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="java.util.Calendar"%>
<%@page import="com.google.gson.Gson"%>
<%@page import="java.sql.DriverManager"%>
<%@page import="java.sql.SQLException"%>
<%@page import="org.json.JSONArray"%>
<%@page import="org.json.JSONObject"%>
<%@page import="org.slf4j.Logger"%>
<%@page import="org.slf4j.LoggerFactory"%>

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ include file="/WEB-INF/views/ajax/M000000001.jsp" %>
<%
    Logger logger = LoggerFactory.getLogger(getClass());

    String header = (String)request.getParameter("header");
    String detail = (String)request.getParameter("detail");
    String sdetail = (String)request.getParameter("sdetail");
    String type = (String)request.getParameter("type");

    String driver = "org.mariadb.jdbc.Driver";
    String url = "jdbc:mariadb://localhost:3306/simbizlocal?useUnicode=true&characterEncoding=UTF-8&characterSetResults=UTF-8";

    String sLine = "";
    String sText = "";
    String user = "root";
    String password = "tlaqlwm2174";

    JSONObject jsonObj = new JSONObject();
    String PassText = null;
    String sql = "";
    java.sql.Connection conn = null;
    java.sql.PreparedStatement pstmt = null;
    ResultSet rs = null;
    Statement stmt = null;
    
    
    String UID = (String)request.getParameter("UID");
    
    java.text.SimpleDateFormat yearFormat = new SimpleDateFormat ( "yy");
    java.util.Date time = new java.util.Date();
    String yearNow = yearFormat.format(time);
    java.text.SimpleDateFormat dateFormat = new SimpleDateFormat ( "yyyy-MM-dd HH:mm:ss");
    String datetime = dateFormat.format(time);

    try {
        try {
            Class.forName(driver);
            conn = DriverManager.getConnection(url, user, password);
            conn.setAutoCommit(false);

            if ( type.equals("insert") || type.equals("edit") ) {}

            if ( type.equals("delete") ) {}
            
            if ( type.equals("cust_btn1") ) {
                String master_no = (String)request.getParameter("master_no");
                
                sql = "update tb_store_master set print_yn = 'Y', print_date = now() where master_no = '" + master_no + "'";
                pstmt = conn.prepareStatement(sql);
                pstmt.executeUpdate();
                
                PassText = "저장 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            }
            if ( type.equals("cust_btn2") ) {
                
                
                Gson gson = new Gson();
                String columns = getSOrder(conn, "SELECT GROUP_CONCAT(COLUMN_NAME SEPARATOR ', ') AS column_names FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'simbizlocal' AND TABLE_NAME = 'tb_store' ");                
            
                
                if(header != null){
                    List<Map> list = gson.fromJson(header, List.class);
                    for(int i = 0 ; i < list.size() ; i ++){
                        Map<String, String> row = getRow(conn, "simbizlocal", "tb_store_master", list.get(i));

                        row.put("createuser", "'" + UID + "'");
                        row.put("createdate", "'" + datetime + "'");
                        row.put("updateuser", "'" + UID + "'");
                        row.put("updatedate", "'" + datetime + "'");    

                        /*Iterator<String> keys = row.keySet().iterator();
                        while(keys.hasNext()){
                            String key = keys.next();
                            
                            if ( row.get(key) != null) {                        
                                String value = row.get(key);
                                if (!sqlCoumns.equals("")) { sqlCoumns += ", "; }
                                sqlCoumns += key;
                                if (!sqlValues.equals("")) { sqlValues += ", "; }
                                sqlValues += value;
                                // 기본키 제외 duplicate sql 만들기
		                        // !key.equals("**"), **에 PK + !key.equals("createuser") && !key.equals("createdate")
                                if (!key.equals("store_id") && !key.equals("createuser") && !key.equals("createdate")) {
                                    if (!sqlDuplis.equals("")) { sqlDuplis += ", "; }
                                    sqlDuplis += (key + "=" + value);
                                }
                            }
                        }*/                        
                        
                    
                        sql = "update tb_store_master set release_request = '대기' ";
                        sql += " , updateuser = '" + UID + "', updatedate = '" + datetime + "' where master_no = " + row.get("master_no");
                        
                        logger.info("update tb_store");
                        logger.info(sql);
                        pstmt = conn.prepareStatement(sql);
                        pstmt.executeUpdate();
                        
                            sql = "insert into tb_store_log(log_type, log_date, " + columns + ") ";
                            sql += "select 'IU' log_type, now() log_date, " + columns + " ";
                            sql += "from tb_store where invoice_no = " + row.get("invoice_no");
                            logger.info("insert into tb_store_log");
                            pstmt = conn.prepareStatement(sql);
                            pstmt.executeUpdate();                        
                        
                    }
                }

                PassText =  "요청이 취소 되었습니다.";
                jsonObj.put("result", PassText);
                PassText = jsonObj.toString();
                out.write(PassText);
                out.flush();
                conn.commit();
                logger.info("!!!!COMMIT DONE!!!!");
            
            
            }
            if ( type.equals("cust_btn3") ) {}
            if ( type.equals("cust_btn4") ) {}
            if ( type.equals("cust_btn5") ) {}
            
            if ( type.equals("excel") ) {}
            
            if ( type.equals("get_data") ) {        
                Gson gson = new Gson();
                if(header != null){
                    JSONObject searchValue = new JSONObject(header);
                    String masterNo = searchValue.getString("masterNo").toString();
                            String dataSql1 = "";
                            dataSql1 +="select * from tb_store_master ";
                            dataSql1 +="WHERE 1 = 1 AND release_request IN ('반송요청','출고요청') ";
                            dataSql1 +="AND master_no = '"+masterNo+"'";
                
                List<Map<String, Object>> master_data = selectAllQuery(conn,dataSql1);
                
                String dataSql ="";
                dataSql +=" Select ";
                dataSql +=" a.store_id, ";
                dataSql +=" a.hawb_no, ";
                dataSql +=" a.invoice_no, ";
                dataSql +="        a.po_no, ";
                dataSql +="        a.master_no, ";
                dataSql +="        a.group_no, ";
                dataSql +="        a.store_status, ";
                dataSql +="        a.stock_status, ";
                dataSql +="       a.release_date, ";
                dataSql +="        a.shipper,  ";
                dataSql +="         a.consignee,  ";
                dataSql +="        a.destination,  ";
                dataSql +="        a.total_qty,  ";
                dataSql +="        a.total_weight,  ";
                dataSql +="         a.volume, ";
                dataSql +="        a.dom_transport, ";
                dataSql +="        a.dom_transport_date, ";
                dataSql +="        a.customsparty, ";
                dataSql +="        a.shipment, ";
                dataSql +="        a.shipping_mark_level, ";
                dataSql +="        ifnull(a.dsv_contact, '') as dsv_contact, ";
                dataSql +="        ifnull(a.notes, '') as notes, ";
                dataSql +="        ifnull(a.volume_weight,'') as volume_weight , ";
                dataSql +="        ifnull(a.charge_weight,'') as charge_weight ";
                dataSql +="        from tb_store a  ";
                dataSql +="        join tb_store_master b on a.master_no = b.master_no ";
                dataSql +="        WHERE 1 = 1 ";
                dataSql +="        and a.master_no = '"+masterNo+"'";
                dataSql +="        and a.store_status = 'Y' ";
                dataSql +="        and a.release_status is null ";
                List<Map<String, Object>> detail_data = selectAllQuery(conn, dataSql);
                
                Map<String, Object> response_data = new HashMap<>();
                response_data.put("res_master", master_data);
                response_data.put("res_detail", detail_data);
                response_data.put("sql1", dataSql1);
                response_data.put("sql", dataSql);
              String jsonString = new Gson().toJson(response_data);
              out.print(jsonString);
        }
    }
             
        } catch (Throwable throwable) {
            if (conn != null) {
                conn.rollback();
                logger.info("!!!!ROLLBACK DONE!!!!");
            }
            throw throwable;
        } finally {
            if (conn != null) conn.close();
            if (pstmt != null) pstmt.close();
        }
    } catch (Exception e) {
        out.write("error : " + e.getMessage().toString() + "\n" + sql);
        if (conn != null) conn.close();
        if (pstmt != null) pstmt.close();
    }
%>
